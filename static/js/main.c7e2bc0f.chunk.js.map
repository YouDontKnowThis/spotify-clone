{"version":3,"sources":["spotify.dtb.js","components/Login.jsx","components/Sidebar/SidbarOptions/SidebarOptions.jsx","components/Sidebar/Sidebar.jsx","components/Body/Header/Header.jsx","components/Body/SongRow/SongRow.jsx","components/Body/Body.jsx","components/Footer/Footer.jsx","components/Player.jsx","App.js","store/actions/playerActions.js","store/actions/actionTypes.js","store/actions/sidebarActions.js","store/reducers/reducer.js","serviceWorker.js","index.js"],"names":["loginUrl","join","Login","className","src","alt","href","SidebarOptions","props","Icon","title","connect","state","playlist","playlists","HomeIcon","SearchIcon","LibraryMusicIcon","items","map","item","key","id","name","user","placeholder","type","Avatar","images","url","display_name","SongRow","Body","spotify","fontSize","Footer","Grid","container","spacing","xs","Slider","aria-labelledby","Player","Component","SpotifyWebApi","App","hash","window","location","substring","split","reduce","initialVal","parts","decodeURIComponent","_token","access_token","this","setToken","setAccessToken","getMe","then","setUser","getUserPlaylists","setPlaylist","getPlaylist","res","appBody","token","dispatch","setTokenData","actions","setUserData","playList","setPlaylistData","initialState","playing","discover_weekly","reducer","action","console","log","Boolean","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gbA6BaA,EAAQ,UA5BI,yCA4BJ,sBAtBC,mCAsBD,yBAzBG,mDAyBH,kBApBN,CACb,8BACA,4BACA,2BACA,gBACA,8BAegGC,KAChG,OADmB,yCCTNC,G,MAhBD,WACZ,OACE,yBAAKC,UAAU,SACb,yBAAKA,UAAU,QACb,yBACEC,IAAI,4EACJC,IAAI,MAGR,uBAAGC,KAAMN,EAAUG,UAAU,QAA7B,yB,iECKSI,MAff,SAAwBC,GACtB,OACE,yBAAKL,UAAU,iBACZK,EAAMC,KACL,oCACE,kBAACD,EAAMC,KAAP,CAAYN,UAAU,wBACtB,4BAAKK,EAAME,QAGb,2BAAIF,EAAME,S,QCmBlB,IAMeC,eANS,SAACC,GACvB,MAAO,CACLC,SAAUD,EAAME,aAILH,EA7Bf,SAAiBH,GAAQ,IAAD,IACtB,OACE,yBAAKL,UAAU,WACb,yBACEA,UAAU,gBACVC,IAAI,kFACJC,IAAI,KAEN,kBAAC,EAAD,CAAgBI,KAAMM,IAAUL,MAAM,SACtC,kBAAC,EAAD,CAAgBD,KAAMO,IAAYN,MAAM,UACxC,kBAAC,EAAD,CAAgBD,KAAMQ,IAAkBP,MAAM,iBAE9C,6BACA,4BAAQP,UAAU,eAAlB,aACA,6BAZF,UAcGK,EAAMK,gBAdT,iBAcG,EAAgBK,aAdnB,aAcG,EAAuBC,KAAI,SAACC,GAC3B,OAAO,kBAAC,EAAD,CAAgBC,IAAKD,EAAKE,GAAIZ,MAAOU,EAAKG,c,cCEzD,IAMeZ,eANS,SAACC,GACvB,MAAO,CACLY,KAAMZ,EAAMY,QAIDb,EA3Bf,SAAgBH,GAAQ,IAAD,QACrB,OACE,yBAAKL,UAAU,UACb,yBAAKA,UAAU,gBACb,kBAAC,IAAD,MACA,2BACEsB,YAAY,yCACZC,KAAK,UAGT,yBAAKvB,UAAU,iBACb,kBAACwB,EAAA,EAAD,CACEvB,IAAG,UAAEI,EAAMgB,YAAR,iBAAE,EAAYI,OAAO,UAArB,aAAE,EAAuBC,IAC5BxB,IAAG,UAAEG,EAAMgB,YAAR,aAAE,EAAYM,eAEnB,sCAAKtB,EAAMgB,YAAX,aAAK,EAAYM,mB,MCAVC,MAlBf,WACE,OACE,yBAAK5B,UAAU,aACb,yBACEA,UAAU,iBACVC,IACE,2EAEFC,IAAI,KAEN,yBAAKF,UAAU,iBACb,0CACA,+D,yDCmCO6B,MAxCf,SAAcxB,GACZ,OACE,yBAAKL,UAAU,QACb,kBAAC,EAAD,CAAQ8B,QAASzB,EAAMyB,UACvB,yBAAK9B,UAAU,cACb,yBACEC,IAAI,mEACJC,IAAI,KAEN,yBAAKF,UAAU,kBACb,4CACA,+CACA,6EAGJ,yBAAKA,UAAU,eACb,yBAAKA,UAAU,eACb,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAc+B,SAAS,UACvB,kBAAC,IAAD,OAGF,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,S,6ICQOC,MAzCf,WACE,OACE,yBAAKhC,UAAU,UACb,yBAAKA,UAAU,gBACb,yBACEA,UAAU,qBACVC,IAAI,4EACJC,IAAI,KAEN,yBAAKF,UAAU,oBACb,qCACA,sCAGJ,yBAAKA,UAAU,kBACb,kBAAC,IAAD,CAAaA,UAAU,uCACvB,kBAAC,IAAD,CAAkBA,UAAU,8BAC5B,kBAAC,IAAD,CACE+B,SAAS,QACT/B,UAAU,8BAEZ,kBAAC,IAAD,CAAcA,UAAU,8BACxB,kBAAC,IAAD,CAAYA,UAAU,uCAExB,yBAAKA,UAAU,iBACb,kBAACiC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACvB,kBAACF,EAAA,EAAD,CAAMhB,MAAI,GACR,kBAAC,IAAD,OAEF,kBAACgB,EAAA,EAAD,CAAMhB,MAAI,GACR,kBAAC,IAAD,OAEF,kBAACgB,EAAA,EAAD,CAAMhB,MAAI,EAACmB,IAAE,GACX,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,2BCxBrBC,G,6KAZX,OACE,yBAAKvC,UAAU,UACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,EAAD,W,GARawC,c,QCCfV,EAAU,I,OAAIW,GAEdC,E,kLAEiB,IAAD,OACZC,ETMDC,OAAOC,SAASF,KACpBG,UAAU,GACVC,MAAM,KACNC,QAAO,SAACC,EAAYhC,GACnB,IAAIiC,EAAQjC,EAAK8B,MAAM,KAGvB,OAFAE,EAAWC,EAAM,IAAMC,mBAAmBD,EAAM,IAEzCD,IACN,ISbHL,OAAOC,SAASF,KAAO,GACvB,IAAMS,EAAST,EAAKU,aAChBD,IACFE,KAAKjD,MAAMkD,SAASH,GACpBtB,EAAQ0B,eAAeJ,GACvBtB,EAAQ2B,QAAQC,MAAK,SAACrC,GACpB,EAAKhB,MAAMsD,QAAQtC,MAGrBS,EAAQ8B,mBAAmBF,MAAK,SAAChD,GAC/B,EAAKL,MAAMwD,YAAYnD,MAGzBoB,EAAQgC,YAAY,0BAA0BJ,MAAK,SAACK,U,+BAKtD,IAAIC,EAAU,kBAAC,EAAD,MAMd,OAJIV,KAAKjD,MAAM4D,QACbD,EAAU,kBAAC,EAAD,CAAQlC,QAASA,KAGtB,yBAAK9B,UAAU,OAAOgE,O,GA5BfxB,aA+CHhC,eAfS,SAACC,GACvB,MAAO,CACLwD,MAAOxD,EAAMwD,MACb5C,KAAMZ,EAAMY,SAIW,SAAC6C,GAC1B,MAAO,CACLX,SAAU,SAACU,GAAD,OAAWC,ECzCD,SAACD,GACvB,OAAO,SAACC,GACNA,EATwB,SAACD,GAC3B,MAAO,CACL1C,KCHqB,YDIrB0C,MAAOA,GAMEE,CAAaF,KDuCQG,CAAiBH,KAC/CN,QAAS,SAACtC,GAAD,OAAU6C,EC7BA,SAAC7C,GACtB,OAAO,SAAC6C,GACNA,EATuB,SAAC7C,GAC1B,MAAO,CACLE,KCjBoB,WDkBpBF,KAAMA,GAMGgD,CAAYhD,KD2BO+C,CAAgB/C,KAC5CwC,YAAa,SAACnD,GAAD,OAAcwD,GG3CHI,EH2CgC5D,EG1CnD,SAACwD,GACNA,EAT2B,SAACI,GAC9B,MAAO,CACL/C,KDFwB,eCGxBb,SAAU4D,GAMDC,CAAgBD,OAFF,IAACA,MH+Cb9D,CAA6CkC,G,2BItDtD8B,GAAe,CACnBP,MAAO,KACP5C,KAAM,KACNV,UAAW,GACX8D,SAAS,EACTxD,KAAM,KACNyD,gBAAiB,MA0BJC,GAvBC,WAAmC,IAAlClE,EAAiC,uDAAzB+D,GAAcI,EAAW,uCAEhD,OADAC,QAAQC,IAAIF,GACJA,EAAOrD,MACb,IFbqB,YEcnB,OAAO,6BACFd,GADL,IAEEwD,MAAOW,EAAOX,QAElB,IFnBoB,WEoBlB,OAAO,6BACFxD,GADL,IAEEY,KAAMuD,EAAOvD,OAEjB,IFtBwB,eEuBtB,OAAO,6BACFZ,GADL,IAEEE,UAAWiE,EAAOlE,WAEtB,QACE,OAAOD,IClBOsE,QACW,cAA7BnC,OAAOC,SAASmC,UAEe,UAA7BpC,OAAOC,SAASmC,UAEhBpC,OAAOC,SAASmC,SAASC,MACvB,2DCRN,IAAMC,GAAmBtC,OAAOuC,sCAAwCC,KAElEC,GAAQC,aAAYX,GAASO,GAAiBK,aAAgBC,QAEpEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,IACf,kBAAC,EAAD,QAGJO,SAASC,eAAe,SD+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.c7e2bc0f.chunk.js","sourcesContent":["// Go To The Authentiation Page\nexport const authPlace = \"https://accounts.spotify.com/authorize\";\n\n// Go Back To Our App\nexport const myAppUri = \"https://youdontknowthis.github.io/spotify-clone/\";\n\n// The Client ID From Spotify Developers API\nexport const userId = \"2fb53848b6a54bc78a3c3ef5c91877f1\";\n\nconst scopes = [\n  \"user-read-currently-playing\",\n  \"user-read-recently-played\",\n  \"user-read-playback-state\",\n  \"user-top-read\",\n  \"user-modify-playback-state\",\n];\n\nexport const getTokenFromUrl = () => {\n  return window.location.hash\n    .substring(1)\n    .split(\"&\")\n    .reduce((initialVal, item) => {\n      let parts = item.split(\"=\");\n      initialVal[parts[0]] = decodeURIComponent(parts[1]);\n\n      return initialVal;\n    }, {});\n};\n\nexport const loginUrl = `${authPlace}?client_id=${userId}&redirect_uri=${myAppUri}&scope=${scopes.join(\n  \"%20\"\n)}&response_type=token&show_dialog=true`;\n","import React from \"react\";\nimport { loginUrl } from \"../spotify.dtb\";\nimport \"./Login.scss\";\n\nconst Login = () => {\n  return (\n    <div className=\"login\">\n      <div className=\"logo\">\n        <img\n          src=\"https://logodownload.org/wp-content/uploads/2020/03/listen-on-spotify.png\"\n          alt=\"\"\n        />\n      </div>\n      <a href={loginUrl} className=\"link\">\n        Login With Spotify\n      </a>\n    </div>\n  );\n};\n\nexport default Login;\n","import React from \"react\";\nimport \"./SidebarOptions.scss\";\n\nfunction SidebarOptions(props) {\n  return (\n    <div className=\"sidebarOption\">\n      {props.Icon ? (\n        <>\n          <props.Icon className=\"sidebarOption__icon\" />\n          <h4>{props.title}</h4>\n        </>\n      ) : (\n        <p>{props.title}</p>\n      )}\n    </div>\n  );\n}\n\nexport default SidebarOptions;\n","import React from \"react\";\nimport \"./Sidebar.scss\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport LibraryMusicIcon from \"@material-ui/icons/LibraryMusic\";\nimport SidebarOptions from \"./SidbarOptions/SidebarOptions\";\nimport { connect } from \"react-redux\";\n\nfunction Sidebar(props) {\n  return (\n    <div className=\"sidebar\">\n      <img\n        className=\"sidebar__logo\"\n        src=\"https://cdn.freebiesupply.com/logos/large/2x/spotify-1-logo-black-and-white.png\"\n        alt=\"\"\n      />\n      <SidebarOptions Icon={HomeIcon} title=\"Home\" />\n      <SidebarOptions Icon={SearchIcon} title=\"Seach\" />\n      <SidebarOptions Icon={LibraryMusicIcon} title=\"Your Library\" />\n\n      <br />\n      <strong className=\"sidebar__hr\">playlists</strong>\n      <hr />\n\n      {props.playlist?.items?.map((item) => {\n        return <SidebarOptions key={item.id} title={item.name} />;\n      })}\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    playlist: state.playlists,\n  };\n};\n\nexport default connect(mapStateToProps)(Sidebar);\n","import React from \"react\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { Avatar } from \"@material-ui/core\";\nimport { connect } from \"react-redux\";\nimport \"./Header.scss\";\n\nfunction Header(props) {\n  return (\n    <div className=\"header\">\n      <div className=\"header__left\">\n        <SearchIcon />\n        <input\n          placeholder=\"Search for Artists, Songs, or Podcasts\"\n          type=\"text\"\n        />\n      </div>\n      <div className=\"header__right\">\n        <Avatar\n          src={props.user?.images[0]?.url}\n          alt={props.user?.display_name}\n        />\n        <h4>{props.user?.display_name}</h4>\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n  };\n};\n\nexport default connect(mapStateToProps)(Header);\n","import React from \"react\";\nimport \"./SongRow.scss\";\n\nfunction SongRow() {\n  return (\n    <div className=\"song__row\">\n      <img\n        className=\"song__rowAlbum\"\n        src={\n          \"https://images.genius.com/ad13f9fed8c302c9ec69e36c1cdc4db7.600x600x1.jpg\"\n        }\n        alt=\"\"\n      />\n      <div className=\"song__rowInfo\">\n        <h1>Track Name</h1>\n        <p>Artist Name. Track Album Name</p>\n      </div>\n    </div>\n  );\n}\n\nexport default SongRow;\n","import React from \"react\";\nimport Header from \"./Header/Header\";\nimport SongRow from \"./SongRow/SongRow\";\nimport PlayCircleFilledIcon from \"@material-ui/icons/PlayCircleFilled\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\n\n// Style\nimport \"./Body.scss\";\n\nfunction Body(props) {\n  return (\n    <div className=\"body\">\n      <Header spotify={props.spotify} />\n      <div className=\"body__info\">\n        <img\n          src=\"https://i.scdn.co/image/78542158649da811009de6311ccdd4e47a713178\"\n          alt=\"\"\n        />\n        <div className=\"body__infoText\">\n          <strong>Playlist</strong>\n          <h2>Discover Weekly</h2>\n          <p>Listen to Faouzia, Sam Smith And More Others</p>\n        </div>\n      </div>\n      <div className=\"body__songs\">\n        <div className=\"body__icons\">\n          <PlayCircleFilledIcon />\n          <FavoriteIcon fontSize=\"large\" />\n          <MoreHorizIcon />\n        </div>\n        {/* List Of Songs */}\n        <SongRow />\n        <SongRow />\n        <SongRow />\n        <SongRow />\n        <SongRow />\n        <SongRow />\n        <SongRow />\n        <SongRow />\n        <SongRow />\n        <SongRow />\n        <SongRow />\n        <SongRow />\n        <SongRow />\n      </div>\n    </div>\n  );\n}\n\nexport default Body;\n","import React from \"react\";\nimport SkipNextIcon from \"@material-ui/icons/SkipNext\";\nimport SkipPreviousIcon from \"@material-ui/icons/SkipPrevious\";\nimport PlayCircleOutlineIcon from \"@material-ui/icons/PlayCircleOutline\";\nimport ShuffleIcon from \"@material-ui/icons/Shuffle\";\nimport RepeatIcon from \"@material-ui/icons/Repeat\";\nimport { Grid, Slider } from \"@material-ui/core\";\nimport VolumeDownIcon from \"@material-ui/icons/VolumeDown\";\nimport PlaylistPlayIcon from \"@material-ui/icons/PlaylistPlay\";\nimport \"./Footer.scss\";\n\nfunction Footer() {\n  return (\n    <div className=\"footer\">\n      <div className=\"footer__left\">\n        <img\n          className=\"footer__albumImage\"\n          src=\"https://developer.spotify.com/assets/branding-guidelines/albumArt1@2x.png\"\n          alt=\"\"\n        />\n        <div className=\"footer__songInfo\">\n          <h4>Yeah!</h4>\n          <p>Usher</p>\n        </div>\n      </div>\n      <div className=\"footer__center\">\n        <ShuffleIcon className=\"footer__icon footer__shuffle green\" />\n        <SkipPreviousIcon className=\"footer__icon footer__prev\" />\n        <PlayCircleOutlineIcon\n          fontSize=\"large\"\n          className=\"footer__icon footer__play\"\n        />\n        <SkipNextIcon className=\"footer__icon footer__next\" />\n        <RepeatIcon className=\"footer__icon footer__repeat green\" />\n      </div>\n      <div className=\"footer__right\">\n        <Grid container spacing={2}>\n          <Grid item>\n            <PlaylistPlayIcon />\n          </Grid>\n          <Grid item>\n            <VolumeDownIcon />\n          </Grid>\n          <Grid item xs>\n            <Slider aria-labelledby=\"continuous-slider\" />\n          </Grid>\n        </Grid>\n      </div>\n    </div>\n  );\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport Sidebar from \"./Sidebar/Sidebar\";\nimport Body from \"./Body/Body\";\nimport Footer from \"./Footer/Footer\";\nimport \"./Player.scss\";\n\nclass Player extends Component {\n  render() {\n    return (\n      <div className=\"player\">\n        <div className=\"player__body\">\n          <Sidebar />\n          <Body />\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default Player;\n","import React, { Component } from \"react\";\nimport Login from \"./components/Login\";\nimport Player from \"./components/Player\";\nimport { getTokenFromUrl } from \"./spotify.dtb\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"./store/actions/dispatch\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\nconst spotify = new SpotifyWebApi();\n\nclass App extends Component {\n  // Run Code Based On Given Condition\n  componentDidMount() {\n    const hash = getTokenFromUrl();\n    window.location.hash = \"\";\n    const _token = hash.access_token;\n    if (_token) {\n      this.props.setToken(_token);\n      spotify.setAccessToken(_token);\n      spotify.getMe().then((user) => {\n        this.props.setUser(user);\n      });\n\n      spotify.getUserPlaylists().then((playlist) => {\n        this.props.setPlaylist(playlist);\n      });\n\n      spotify.getPlaylist(\"3CIVP9zTuNeTazej4V8gRJ\").then((res) => {});\n    }\n  }\n\n  render() {\n    let appBody = <Login />;\n\n    if (this.props.token) {\n      appBody = <Player spotify={spotify} />;\n    }\n\n    return <div className=\"App\">{appBody}</div>;\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    token: state.token,\n    user: state.user,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setToken: (token) => dispatch(actions.setToken(token)),\n    setUser: (user) => dispatch(actions.setUser(user)),\n    setPlaylist: (playlist) => dispatch(actions.setPlaylist(playlist)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import * as actionTypes from \"./actionTypes\";\n\nexport const setTokenData = (token) => {\n  return {\n    type: actionTypes.SET_TOKEN,\n    token: token,\n  };\n};\n\nexport const setToken = (token) => {\n  return (dispatch) => {\n    dispatch(setTokenData(token));\n  };\n};\n\nexport const setUserData = (user) => {\n  return {\n    type: actionTypes.SET_USER,\n    user: user,\n  };\n};\n\nexport const setUser = (user) => {\n  return (dispatch) => {\n    dispatch(setUserData(user));\n  };\n};\n","export const SET_USER = \"SET_USER\";\nexport const SET_TOKEN = \"SET_TOKEN\";\nexport const SET_PLAYLIST = \"SET_PLAYLIST\";\n","import * as actionTypes from \"./actionTypes\";\n\nexport const setPlaylistData = (playList) => {\n  return {\n    type: actionTypes.SET_PLAYLIST,\n    playlist: playList,\n  };\n};\n\nexport const setPlaylist = (playList) => {\n  return (dispatch) => {\n    dispatch(setPlaylistData(playList));\n  };\n};\n","import * as actionTypes from \"../actions/actionTypes\";\n\nconst initialState = {\n  token: null,\n  user: null,\n  playlists: [],\n  playing: false,\n  item: null,\n  discover_weekly: null,\n};\n\nconst reducer = (state = initialState, action) => {\n  console.log(action);\n  switch (action.type) {\n    case actionTypes.SET_TOKEN:\n      return {\n        ...state,\n        token: action.token,\n      };\n    case actionTypes.SET_USER:\n      return {\n        ...state,\n        user: action.user,\n      };\n    case actionTypes.SET_PLAYLIST:\n      return {\n        ...state,\n        playlists: action.playlist,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { Provider } from \"react-redux\";\nimport reducer from \"./store/reducers/reducer\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}